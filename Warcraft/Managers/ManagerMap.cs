using Warcraft.Map;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using System;

namespace Warcraft.Managers
{
    public class MyEqualityComparer : IEqualityComparer<int[]>
    {
        public bool Equals(int[] x, int[] y)
        {
            if (x.Length != y.Length)
            {
                return false;
            }
            for (int i = 0; i < x.Length; i++)
            {
                if (x[i] != y[i])
                {
                    return false;
                }
            }
            return true;
        }

        public int GetHashCode(int[] obj)
        {
            int result = 17;
            for (int i = 0; i < obj.Length; i++)
            {
                unchecked
                {
                    result = result * 23 + obj[i];
                }
            }
            return result;
        }
    }

    class ManagerMap
    {
        private Texture2D texture;
        private List<List<Tile>> map = new List<List<Tile>>();
        public List<Tile> walls = new List<Tile>();

        int[,,] metadata = new int[50, 50, 4];
        
        public static Dictionary<int[], int[]> Mapping = new Dictionary<int[], int[]>(new MyEqualityComparer());

        public ManagerMap()
        {
            float[,] noise = new float[50, 50] {
{ 0.3167326f, 0.4306758f, 0.5010897f, 0.5394983f, 0.5986301f, 0.5991657f, 0.6326404f, 0.7120357f, 0.7087914f, 0.671352f, 0.6686478f, 0.6366898f, 0.6954719f, 0.7421003f, 0.815399f, 0.8285838f, 0.7714761f, 0.7112999f, 0.6607386f, 0.6410637f, 0.6211889f, 0.5618506f, 0.5249661f, 0.5193426f, 0.6121781f, 0.6483945f, 0.6771357f, 0.7637662f, 0.7975751f, 0.8319025f, 0.8000093f, 0.7285639f, 0.6641462f, 0.5899585f, 0.5244902f, 0.4599249f, 0.4064562f, 0.3747788f, 0.3526211f, 0.3215152f, 0.3008405f, 0.2158816f, 0.1726056f, 0.1436586f, 0.09175643f, 0.05251076f, 0.07590792f, 0.1785686f, 0.2594424f, 0.330054f,  },
{ 0.4025427f, 0.4980691f, 0.5395265f, 0.5979269f, 0.6269848f, 0.6425427f, 0.6886755f, 0.7451683f, 0.7337303f, 0.6774814f, 0.6509845f, 0.6420726f, 0.7120645f, 0.7668929f, 0.809091f, 0.8132856f, 0.7817634f, 0.7104148f, 0.6303946f, 0.5889322f, 0.5622215f, 0.5264636f, 0.5132496f, 0.5225253f, 0.5948809f, 0.653993f, 0.6753989f, 0.7396198f, 0.7828644f, 0.8145726f, 0.7779756f, 0.7403044f, 0.664755f, 0.6147347f, 0.5200701f, 0.4445572f, 0.3798567f, 0.3489502f, 0.2875541f, 0.2560315f, 0.2444876f, 0.1884003f, 0.147031f, 0.09357953f, 0.04238304f, 0.02076556f, 0.05090231f, 0.1237284f, 0.2225192f, 0.3002132f,  },
{ 0.4574634f, 0.5539646f, 0.60499f, 0.6427703f, 0.6446232f, 0.6849637f, 0.7186272f, 0.7331767f, 0.7346538f, 0.7276883f, 0.7245926f, 0.7620466f, 0.7767844f, 0.8083866f, 0.8509799f, 0.8104697f, 0.7907599f, 0.7191525f, 0.6425186f, 0.6080983f, 0.5555241f, 0.543084f, 0.5055641f, 0.5436242f, 0.6153949f, 0.6595267f, 0.6969799f, 0.7553107f, 0.7554782f, 0.7774658f, 0.7402253f, 0.7230143f, 0.6558601f, 0.5930888f, 0.4942216f, 0.3990309f, 0.3176658f, 0.2676868f, 0.2206887f, 0.2021949f, 0.1557086f, 0.1164197f, 0.07513746f, 0.03990139f, 0.0421732f, 0.01778848f, 0.05669881f, 0.141576f, 0.1998932f, 0.2628079f,  },
{ 0.4968404f, 0.5754618f, 0.636838f, 0.6990125f, 0.7059989f, 0.7408246f, 0.7390009f, 0.7585232f, 0.7441627f, 0.7271937f, 0.7687911f, 0.7793158f, 0.8141153f, 0.8283154f, 0.8300501f, 0.8023095f, 0.7782623f, 0.737409f, 0.6806504f, 0.6599205f, 0.6153583f, 0.6024396f, 0.6099763f, 0.6305987f, 0.6432924f, 0.7032082f, 0.735528f, 0.7955037f, 0.7750491f, 0.7585441f, 0.7224022f, 0.7181697f, 0.6607675f, 0.5981479f, 0.4825316f, 0.3891014f, 0.2922879f, 0.2226719f, 0.2079298f, 0.1471481f, 0.1030359f, 0.1058838f, 0.06518266f, 0.02801243f, 0.01774179f, 0.00708471f, 0.05140078f, 0.1322909f, 0.2082196f, 0.2465372f,  },
{ 0.5365208f, 0.5801728f, 0.6860029f, 0.7308268f, 0.7447813f, 0.7476587f, 0.7775658f, 0.7595163f, 0.7392089f, 0.7540326f, 0.7787524f, 0.8041587f, 0.8060635f, 0.7997131f, 0.79645f, 0.7902744f, 0.762158f, 0.7315022f, 0.712604f, 0.7027967f, 0.6725538f, 0.6902775f, 0.7154988f, 0.7085591f, 0.7150186f, 0.7313871f, 0.7503873f, 0.8213965f, 0.8099371f, 0.7570001f, 0.7055674f, 0.6895799f, 0.6451565f, 0.5812588f, 0.4833648f, 0.3889992f, 0.3139814f, 0.2572616f, 0.2315236f, 0.1501915f, 0.1152815f, 0.09100207f, 0.08185216f, 0.02077423f, 0.000818721f, 0.05209636f, 0.07348937f, 0.1373571f, 0.2161255f, 0.2649119f,  },
{ 0.5456661f, 0.5806406f, 0.6756068f, 0.7042173f, 0.7585498f, 0.77939f, 0.7991322f, 0.7956471f, 0.8022946f, 0.8154188f, 0.8051972f, 0.8245202f, 0.8292588f, 0.8276926f, 0.8331977f, 0.8050119f, 0.7599048f, 0.7419465f, 0.7207745f, 0.7071179f, 0.7278318f, 0.716859f, 0.7141465f, 0.7276602f, 0.7501816f, 0.7471557f, 0.7639993f, 0.79672f, 0.757555f, 0.7249508f, 0.6738113f, 0.6623592f, 0.6125644f, 0.5871439f, 0.5159054f, 0.4167054f, 0.3278833f, 0.2694126f, 0.2586731f, 0.179806f, 0.1430943f, 0.121145f, 0.09602068f, 0.08100791f, 0.08936736f, 0.1312912f, 0.1503647f, 0.1810748f, 0.2101877f, 0.271354f,  },
{ 0.5846918f, 0.6446381f, 0.6984301f, 0.7357524f, 0.7779315f, 0.8227481f, 0.8595317f, 0.8562171f, 0.8314824f, 0.8089328f, 0.8600476f, 0.8345577f, 0.8164485f, 0.8567184f, 0.8168639f, 0.7851883f, 0.7510032f, 0.7156257f, 0.6815706f, 0.7090621f, 0.7310619f, 0.7101895f, 0.7203258f, 0.7593533f, 0.7601803f, 0.7561697f, 0.760977f, 0.7609629f, 0.7390805f, 0.7034039f, 0.660549f, 0.6254709f, 0.591795f, 0.5564867f, 0.4918753f, 0.4357143f, 0.3626399f, 0.3108071f, 0.3079967f, 0.2538487f, 0.2082514f, 0.1829201f, 0.1743689f, 0.1617686f, 0.1839865f, 0.2217022f, 0.2223609f, 0.2371731f, 0.2474525f, 0.2962462f,  },
{ 0.6093922f, 0.6728588f, 0.7190539f, 0.7659617f, 0.8245534f, 0.8431945f, 0.8662066f, 0.882717f, 0.8497321f, 0.8046996f, 0.8330425f, 0.8219236f, 0.8295636f, 0.8415475f, 0.829531f, 0.744023f, 0.7202302f, 0.724214f, 0.7081516f, 0.7456329f, 0.7412229f, 0.7430673f, 0.7552232f, 0.7566537f, 0.7160872f, 0.7014738f, 0.7093562f, 0.718101f, 0.6714646f, 0.6433702f, 0.6330362f, 0.6105036f, 0.5747584f, 0.5298879f, 0.5003166f, 0.4348451f, 0.3645771f, 0.3577878f, 0.3608555f, 0.3128175f, 0.2872755f, 0.2997366f, 0.2697136f, 0.2633351f, 0.2775981f, 0.3048285f, 0.3147537f, 0.312264f, 0.2794216f, 0.3044114f,  },
{ 0.6337664f, 0.6494364f, 0.6776002f, 0.7500429f, 0.8460476f, 0.8542987f, 0.892987f, 0.9132561f, 0.8789264f, 0.8487228f, 0.8436596f, 0.8471635f, 0.8636056f, 0.8429155f, 0.788973f, 0.7220601f, 0.7113358f, 0.7000417f, 0.7056291f, 0.7305583f, 0.72153f, 0.7303425f, 0.7407462f, 0.7483905f, 0.7150249f, 0.6907031f, 0.6749659f, 0.6790419f, 0.6433449f, 0.6258312f, 0.6082528f, 0.575636f, 0.5316963f, 0.4774745f, 0.4525403f, 0.4142307f, 0.3994299f, 0.3995562f, 0.367067f, 0.3392657f, 0.2964285f, 0.3180402f, 0.3243345f, 0.3483733f, 0.3698581f, 0.3565184f, 0.3536787f, 0.344211f, 0.3669085f, 0.3779418f,  },
{ 0.6188144f, 0.6154264f, 0.658834f, 0.7355881f, 0.795189f, 0.8372023f, 0.8715172f, 0.8772534f, 0.8888563f, 0.8633274f, 0.84999f, 0.8581845f, 0.8525611f, 0.8439423f, 0.8115036f, 0.7536934f, 0.7542886f, 0.7305629f, 0.7412844f, 0.7541381f, 0.713714f, 0.7243305f, 0.7240655f, 0.7508093f, 0.7197396f, 0.692774f, 0.6926541f, 0.6794178f, 0.6652598f, 0.6182867f, 0.6157562f, 0.5594679f, 0.4927966f, 0.46815f, 0.4386384f, 0.4308473f, 0.415243f, 0.393642f, 0.346851f, 0.3405018f, 0.3446179f, 0.3367825f, 0.3481753f, 0.3499743f, 0.3660461f, 0.3673011f, 0.3452457f, 0.3745869f, 0.4107316f, 0.4257141f,  },
{ 0.622162f, 0.6154003f, 0.6486929f, 0.7341734f, 0.7954708f, 0.8207756f, 0.8100455f, 0.8422257f, 0.8768117f, 0.887369f, 0.8775572f, 0.8859529f, 0.8772691f, 0.8589062f, 0.8318816f, 0.8294132f, 0.8082857f, 0.7989162f, 0.799337f, 0.7900007f, 0.7455291f, 0.7481143f, 0.7527837f, 0.758601f, 0.7329556f, 0.7279364f, 0.702721f, 0.6958325f, 0.6889224f, 0.6389496f, 0.6101176f, 0.5821691f, 0.4999219f, 0.4778213f, 0.4465361f, 0.4196458f, 0.3892846f, 0.3878573f, 0.3496594f, 0.3648913f, 0.3814009f, 0.3747613f, 0.3524176f, 0.3424598f, 0.3426081f, 0.364422f, 0.3679049f, 0.4137191f, 0.4138547f, 0.3981426f,  },
{ 0.634935f, 0.6528654f, 0.7019392f, 0.7421624f, 0.7908824f, 0.8137798f, 0.835399f, 0.8549349f, 0.8686448f, 0.8895391f, 0.8775218f, 0.9015218f, 0.9248591f, 0.8852419f, 0.889527f, 0.8907503f, 0.8275728f, 0.8048806f, 0.8042402f, 0.7956179f, 0.7958131f, 0.7844143f, 0.737502f, 0.7217287f, 0.7219482f, 0.7263741f, 0.7291741f, 0.6916679f, 0.6667891f, 0.6380035f, 0.5900674f, 0.5608611f, 0.4970934f, 0.464061f, 0.4089992f, 0.3649468f, 0.3248006f, 0.3447696f, 0.3355258f, 0.3652521f, 0.3669443f, 0.3425314f, 0.3180566f, 0.3120841f, 0.324798f, 0.3453054f, 0.3843924f, 0.4240303f, 0.4320226f, 0.4084855f,  },
{ 0.6707991f, 0.6995099f, 0.7473518f, 0.7878061f, 0.8118594f, 0.8316277f, 0.8439456f, 0.8984814f, 0.8864999f, 0.8980348f, 0.9353007f, 0.9303765f, 0.9692146f, 0.9310473f, 0.9243037f, 0.8891035f, 0.8381016f, 0.7924101f, 0.7579769f, 0.7761448f, 0.8270365f, 0.7897555f, 0.7448779f, 0.6787313f, 0.6795977f, 0.7225065f, 0.7333019f, 0.6779771f, 0.6290774f, 0.5983241f, 0.5436149f, 0.4930575f, 0.4556132f, 0.4398633f, 0.3677685f, 0.3430002f, 0.2851568f, 0.3152776f, 0.3282673f, 0.3666221f, 0.3630496f, 0.3173791f, 0.3147672f, 0.3109453f, 0.3311864f, 0.379836f, 0.408069f, 0.4101057f, 0.4112234f, 0.412854f,  },
{ 0.6886385f, 0.7450042f, 0.7864211f, 0.7870619f, 0.8351639f, 0.8552557f, 0.8880811f, 0.9021133f, 0.902643f, 0.9345948f, 0.9602255f, 0.9607667f, 0.9479467f, 0.9319057f, 0.9450359f, 0.9137236f, 0.8579164f, 0.7792036f, 0.7562221f, 0.7918028f, 0.8009102f, 0.7475386f, 0.7074826f, 0.6877419f, 0.6930021f, 0.7049804f, 0.722666f, 0.6871749f, 0.6490753f, 0.5789457f, 0.4888306f, 0.4438329f, 0.4116262f, 0.3825935f, 0.3473512f, 0.3223597f, 0.2978945f, 0.3312463f, 0.3737961f, 0.402894f, 0.3868224f, 0.3414554f, 0.3513143f, 0.3622834f, 0.3757433f, 0.376106f, 0.386278f, 0.368171f, 0.3597376f, 0.3405794f,  },
{ 0.6913559f, 0.7296079f, 0.7750505f, 0.8059472f, 0.8244736f, 0.8394589f, 0.8758442f, 0.8883823f, 0.9513453f, 0.9599596f, 0.947925f, 0.9559085f, 0.9544432f, 0.9411198f, 0.9493408f, 0.9061764f, 0.8468128f, 0.7549955f, 0.7219149f, 0.7495962f, 0.7456433f, 0.7088686f, 0.6924655f, 0.6704045f, 0.6789425f, 0.6888332f, 0.6763546f, 0.6872811f, 0.6281106f, 0.560124f, 0.4353152f, 0.3766359f, 0.3684556f, 0.3651218f, 0.3597195f, 0.3153188f, 0.3135058f, 0.3364486f, 0.3770345f, 0.4023044f, 0.359468f, 0.3761314f, 0.3571129f, 0.3957013f, 0.3780962f, 0.3980438f, 0.3803357f, 0.3598772f, 0.3012889f, 0.296534f,  },
{ 0.722796f, 0.7296084f, 0.7334244f, 0.7829465f, 0.7809803f, 0.7957752f, 0.8371454f, 0.9019809f, 0.9560649f, 0.9750397f, 0.9662784f, 0.970625f, 0.9821939f, 0.9867653f, 0.9794409f, 0.9375486f, 0.8795168f, 0.7988398f, 0.7485075f, 0.7292882f, 0.7400568f, 0.7245874f, 0.7128832f, 0.6855813f, 0.6845879f, 0.6801498f, 0.6396692f, 0.6383092f, 0.5852926f, 0.5032893f, 0.3981858f, 0.3368033f, 0.3275479f, 0.3298309f, 0.3168721f, 0.3002015f, 0.2996928f, 0.322496f, 0.3504086f, 0.3556199f, 0.3416803f, 0.328548f, 0.3414603f, 0.3409513f, 0.357155f, 0.3786951f, 0.3780293f, 0.333862f, 0.2880828f, 0.2487363f,  },
{ 0.7119052f, 0.7072154f, 0.7001445f, 0.7200105f, 0.7136459f, 0.7259462f, 0.8162283f, 0.8920232f, 0.9667051f, 0.954199f, 0.9426686f, 0.9516785f, 0.9807122f, 0.9942305f, 0.9833102f, 0.9412966f, 0.8782929f, 0.8223706f, 0.7832699f, 0.7596115f, 0.7404264f, 0.732223f, 0.716747f, 0.730438f, 0.7211011f, 0.7087945f, 0.6534632f, 0.6152132f, 0.5216865f, 0.4325921f, 0.3664238f, 0.3328826f, 0.3260714f, 0.2986003f, 0.2871678f, 0.2893947f, 0.2846687f, 0.3068787f, 0.3235395f, 0.3228316f, 0.297202f, 0.279166f, 0.3092782f, 0.2990622f, 0.3272763f, 0.3401755f, 0.3424906f, 0.3160734f, 0.2784111f, 0.2634039f,  },
{ 0.694836f, 0.6816048f, 0.6645048f, 0.6799717f, 0.6689817f, 0.7186518f, 0.7891043f, 0.8283303f, 0.9097711f, 0.9168016f, 0.9252878f, 0.9538625f, 0.9722887f, 0.9524395f, 0.965792f, 0.9637413f, 0.9016803f, 0.8446949f, 0.7836038f, 0.7870502f, 0.7423714f, 0.6957046f, 0.7142428f, 0.7283311f, 0.7231604f, 0.6931664f, 0.6523011f, 0.5873867f, 0.5086914f, 0.437584f, 0.3669266f, 0.3452488f, 0.3524502f, 0.2944047f, 0.2639433f, 0.2978031f, 0.2787601f, 0.2967248f, 0.3139915f, 0.2933729f, 0.2519072f, 0.2594016f, 0.2800584f, 0.28023f, 0.2868741f, 0.309314f, 0.3318787f, 0.3115315f, 0.2670314f, 0.2700615f,  },
{ 0.6545313f, 0.6199589f, 0.6048254f, 0.6014307f, 0.6489849f, 0.7230448f, 0.7603729f, 0.775588f, 0.8382251f, 0.8791406f, 0.8819079f, 0.8812217f, 0.9114041f, 0.9113494f, 0.8851571f, 0.8787999f, 0.8722301f, 0.8689899f, 0.786802f, 0.7482615f, 0.727666f, 0.7050103f, 0.7136437f, 0.6881291f, 0.6741656f, 0.6532874f, 0.6309847f, 0.5845719f, 0.5425512f, 0.4606737f, 0.4058519f, 0.4060277f, 0.3885113f, 0.3443478f, 0.3251429f, 0.3535845f, 0.3333354f, 0.3225953f, 0.3484955f, 0.3047178f, 0.259836f, 0.2760544f, 0.27601f, 0.2680022f, 0.273181f, 0.3044301f, 0.3271325f, 0.3081283f, 0.2682042f, 0.2321696f,  },
{ 0.6482578f, 0.6000775f, 0.5839843f, 0.5840555f, 0.6215816f, 0.6921895f, 0.7565572f, 0.7720496f, 0.8367543f, 0.8584898f, 0.8771401f, 0.8521482f, 0.8246892f, 0.8334677f, 0.8323375f, 0.8593068f, 0.8530642f, 0.8238162f, 0.8076352f, 0.7677266f, 0.7395883f, 0.7528313f, 0.7086559f, 0.6933942f, 0.6626897f, 0.6538773f, 0.6321231f, 0.5966301f, 0.5616482f, 0.4948094f, 0.4821721f, 0.4549988f, 0.4299763f, 0.406757f, 0.4083181f, 0.4215055f, 0.3924178f, 0.3696125f, 0.3789815f, 0.3380584f, 0.2584581f, 0.2904771f, 0.306327f, 0.3047f, 0.291956f, 0.3035913f, 0.3527213f, 0.3142444f, 0.2873591f, 0.2616304f,  },
{ 0.6345571f, 0.5972651f, 0.5783157f, 0.6044143f, 0.6024563f, 0.6842016f, 0.7315129f, 0.773259f, 0.812976f, 0.8410098f, 0.82347f, 0.7799456f, 0.7631185f, 0.7681572f, 0.7900007f, 0.8031455f, 0.8233022f, 0.8122973f, 0.8103163f, 0.7775653f, 0.7585191f, 0.7703259f, 0.7452011f, 0.7344418f, 0.699916f, 0.6855811f, 0.6375819f, 0.5830947f, 0.5603271f, 0.5576565f, 0.5346801f, 0.5086693f, 0.4742815f, 0.4400195f, 0.4400334f, 0.4334083f, 0.428047f, 0.4198101f, 0.3992765f, 0.3384695f, 0.3029846f, 0.284611f, 0.3035797f, 0.3196744f, 0.3111272f, 0.3192244f, 0.3237523f, 0.2833331f, 0.2762138f, 0.2787834f,  },
{ 0.6506658f, 0.622296f, 0.6126665f, 0.6405566f, 0.6524507f, 0.67332f, 0.6933488f, 0.7233836f, 0.7716691f, 0.7945449f, 0.7669059f, 0.7646348f, 0.7680687f, 0.7796337f, 0.7804872f, 0.8047528f, 0.8184713f, 0.8197329f, 0.7838715f, 0.7518932f, 0.7171458f, 0.7573474f, 0.7606065f, 0.7623237f, 0.7439023f, 0.7010295f, 0.6648731f, 0.6152437f, 0.5949532f, 0.5951449f, 0.5613256f, 0.5282511f, 0.486266f, 0.4472447f, 0.4385267f, 0.4358757f, 0.4505758f, 0.4609859f, 0.4180138f, 0.3978452f, 0.3491238f, 0.3314262f, 0.3407584f, 0.3371661f, 0.3239759f, 0.2965944f, 0.2795341f, 0.2668092f, 0.2454545f, 0.2516388f,  },
{ 0.6343101f, 0.6352672f, 0.6277015f, 0.6686677f, 0.6836593f, 0.7076253f, 0.7224513f, 0.7347604f, 0.7790225f, 0.8104773f, 0.7849666f, 0.7873887f, 0.7895836f, 0.799875f, 0.7914602f, 0.7914481f, 0.7832991f, 0.8159168f, 0.7912927f, 0.757456f, 0.735395f, 0.740122f, 0.7536162f, 0.7711077f, 0.7727112f, 0.7196144f, 0.668221f, 0.6489464f, 0.6539548f, 0.6550773f, 0.6360717f, 0.5659406f, 0.4919718f, 0.4423856f, 0.4314957f, 0.4263696f, 0.4178163f, 0.4233999f, 0.3909191f, 0.3876351f, 0.3844256f, 0.3717883f, 0.3575348f, 0.2991476f, 0.2624179f, 0.2452402f, 0.232369f, 0.2323693f, 0.2370954f, 0.2301108f,  },
{ 0.6496284f, 0.6506048f, 0.6598553f, 0.6890822f, 0.6944107f, 0.7371309f, 0.7666392f, 0.7756473f, 0.7915331f, 0.8197695f, 0.8167143f, 0.8161688f, 0.8121012f, 0.8341187f, 0.8027062f, 0.7661586f, 0.8004181f, 0.8097273f, 0.7979595f, 0.7799864f, 0.751421f, 0.7396613f, 0.7475194f, 0.7754635f, 0.809607f, 0.7580536f, 0.6885515f, 0.6941978f, 0.6983143f, 0.6675223f, 0.6407223f, 0.5742162f, 0.5052215f, 0.4622289f, 0.4053502f, 0.3681764f, 0.3736251f, 0.3654019f, 0.3468127f, 0.3724335f, 0.4105775f, 0.4058502f, 0.3725742f, 0.2812575f, 0.2392727f, 0.2032148f, 0.2021847f, 0.1783778f, 0.1777368f, 0.2271821f,  },
{ 0.6811885f, 0.688818f, 0.6964328f, 0.7552281f, 0.7502154f, 0.7758026f, 0.789769f, 0.7739669f, 0.7973098f, 0.8005363f, 0.7973f, 0.7876312f, 0.7836246f, 0.830144f, 0.8558192f, 0.8187302f, 0.7966036f, 0.7797568f, 0.7862096f, 0.805121f, 0.8292249f, 0.7855941f, 0.7899464f, 0.8310363f, 0.8404078f, 0.7823002f, 0.7391908f, 0.7400352f, 0.7032554f, 0.6586536f, 0.6129228f, 0.5674025f, 0.4935859f, 0.4380456f, 0.3875306f, 0.3169096f, 0.3067051f, 0.3346838f, 0.3338372f, 0.3928314f, 0.4291982f, 0.3863677f, 0.3510171f, 0.2976678f, 0.2604547f, 0.1425079f, 0.1301655f, 0.1220729f, 0.1366981f, 0.1974321f,  },
{ 0.6803313f, 0.68758f, 0.7529923f, 0.7842389f, 0.8006476f, 0.7827862f, 0.7964489f, 0.7822877f, 0.8102511f, 0.819334f, 0.8148056f, 0.8014414f, 0.8161764f, 0.8320662f, 0.8518074f, 0.8449821f, 0.8065245f, 0.8022935f, 0.8149134f, 0.8401328f, 0.8457406f, 0.8242152f, 0.8228849f, 0.8351418f, 0.8266954f, 0.7795169f, 0.7445937f, 0.7366922f, 0.7202697f, 0.6718817f, 0.6219168f, 0.5694575f, 0.5082065f, 0.439831f, 0.3611836f, 0.2914407f, 0.3128033f, 0.3470964f, 0.3328229f, 0.3781677f, 0.3955993f, 0.3635597f, 0.3064619f, 0.2751291f, 0.2071721f, 0.1401671f, 0.1149741f, 0.1145171f, 0.1413847f, 0.165023f,  },
{ 0.693019f, 0.7209177f, 0.7639118f, 0.8191668f, 0.805186f, 0.7749874f, 0.7654508f, 0.7691337f, 0.8214313f, 0.8366041f, 0.8224168f, 0.815647f, 0.8501044f, 0.8393127f, 0.8416513f, 0.8227972f, 0.8078182f, 0.8259082f, 0.8386267f, 0.8605611f, 0.8587461f, 0.8458311f, 0.830777f, 0.8138261f, 0.7783141f, 0.7435768f, 0.7217474f, 0.7542552f, 0.7259634f, 0.6852961f, 0.6438209f, 0.5850262f, 0.5152959f, 0.4340526f, 0.3436292f, 0.2708365f, 0.286149f, 0.3418809f, 0.3485533f, 0.3778623f, 0.3608046f, 0.3060441f, 0.2509125f, 0.2137608f, 0.1704718f, 0.1296546f, 0.1334843f, 0.1322934f, 0.1493022f, 0.1369564f,  },
{ 0.6729467f, 0.697358f, 0.7384791f, 0.7939753f, 0.7938293f, 0.7881358f, 0.7901405f, 0.783325f, 0.8276842f, 0.8213861f, 0.8208934f, 0.8222556f, 0.8299852f, 0.8101119f, 0.7947775f, 0.8272604f, 0.8673704f, 0.8798637f, 0.8597454f, 0.8306114f, 0.8150663f, 0.8353364f, 0.8488865f, 0.8241813f, 0.7649297f, 0.7157885f, 0.6814382f, 0.7233325f, 0.7239112f, 0.6648391f, 0.6048016f, 0.5478696f, 0.4771767f, 0.4115731f, 0.3233325f, 0.247021f, 0.250567f, 0.2665461f, 0.3012552f, 0.3141458f, 0.2860394f, 0.257549f, 0.1962036f, 0.1603898f, 0.1320499f, 0.09996134f, 0.08776693f, 0.1154046f, 0.1450333f, 0.1630263f,  },
{ 0.6756697f, 0.6738428f, 0.7107213f, 0.7587987f, 0.7604309f, 0.787164f, 0.7815949f, 0.7694211f, 0.7788136f, 0.7668853f, 0.7699723f, 0.7840372f, 0.8051794f, 0.8151823f, 0.7941312f, 0.8179318f, 0.8855645f, 0.9152856f, 0.8700972f, 0.8660218f, 0.8152936f, 0.793587f, 0.8026224f, 0.8016565f, 0.7732821f, 0.737077f, 0.7225698f, 0.7409731f, 0.7173928f, 0.6811606f, 0.6119768f, 0.5519781f, 0.4767741f, 0.3992555f, 0.2793365f, 0.2346744f, 0.2021029f, 0.2150476f, 0.2491618f, 0.272456f, 0.2357496f, 0.2302076f, 0.159515f, 0.1340316f, 0.1268485f, 0.09665529f, 0.08568832f, 0.08167543f, 0.1085422f, 0.1641956f,  },
{ 0.6745416f, 0.677421f, 0.7061135f, 0.7298959f, 0.7222521f, 0.7610113f, 0.7527889f, 0.7383498f, 0.7282795f, 0.6904161f, 0.7059022f, 0.7538593f, 0.7688882f, 0.78705f, 0.7787269f, 0.8440424f, 0.903805f, 0.9156346f, 0.8967681f, 0.8947346f, 0.8196462f, 0.7891377f, 0.8000631f, 0.8176518f, 0.7925293f, 0.8000756f, 0.7788121f, 0.7900563f, 0.7488602f, 0.7005823f, 0.64204f, 0.5713102f, 0.489457f, 0.3986668f, 0.3436312f, 0.2854482f, 0.2117127f, 0.186509f, 0.2140615f, 0.2403281f, 0.2327355f, 0.2147757f, 0.1662918f, 0.1600057f, 0.1541658f, 0.1117482f, 0.08198884f, 0.07772917f, 0.1180231f, 0.1606007f,  },
{ 0.7168846f, 0.6780611f, 0.6894903f, 0.6796641f, 0.6563802f, 0.6912869f, 0.7152324f, 0.6969134f, 0.6718976f, 0.6503738f, 0.6631157f, 0.6811928f, 0.708725f, 0.7710329f, 0.802707f, 0.8586177f, 0.8768222f, 0.9110322f, 0.8825143f, 0.8624606f, 0.8346975f, 0.8044532f, 0.8151935f, 0.8249551f, 0.812365f, 0.8054271f, 0.7978873f, 0.7835436f, 0.7620604f, 0.7232686f, 0.6596345f, 0.5954453f, 0.5275443f, 0.4502516f, 0.3528403f, 0.2860277f, 0.2415518f, 0.2100957f, 0.1952612f, 0.1854927f, 0.2117451f, 0.2063808f, 0.1785729f, 0.1669052f, 0.1557618f, 0.1294534f, 0.1045792f, 0.103413f, 0.1088307f, 0.129209f,  },
{ 0.7036979f, 0.6756255f, 0.6654781f, 0.6525552f, 0.6174868f, 0.6044247f, 0.6329578f, 0.6097803f, 0.5804092f, 0.5676199f, 0.6011084f, 0.6342499f, 0.6826489f, 0.7507266f, 0.7857417f, 0.8401732f, 0.8705662f, 0.8885247f, 0.8635393f, 0.8371124f, 0.8185226f, 0.8060337f, 0.8118941f, 0.8069847f, 0.7937239f, 0.802219f, 0.8136391f, 0.7605891f, 0.7667361f, 0.7551114f, 0.6630253f, 0.5846775f, 0.5110478f, 0.4561907f, 0.3565341f, 0.2952402f, 0.2660047f, 0.2428201f, 0.2159296f, 0.1891357f, 0.1814987f, 0.1904315f, 0.1797655f, 0.1646885f, 0.1459754f, 0.1479931f, 0.1397932f, 0.1425385f, 0.1392177f, 0.1671772f,  },
{ 0.6746106f, 0.6523219f, 0.6246939f, 0.6083549f, 0.5702947f, 0.5480483f, 0.5703183f, 0.5631835f, 0.5186713f, 0.4783188f, 0.5053795f, 0.5833587f, 0.6492937f, 0.7187611f, 0.7656739f, 0.8255586f, 0.8814607f, 0.8560481f, 0.8246688f, 0.8126417f, 0.7717861f, 0.7652927f, 0.7620824f, 0.8048847f, 0.7946521f, 0.7756309f, 0.798535f, 0.7461319f, 0.7559839f, 0.7435542f, 0.6537806f, 0.5798305f, 0.5122045f, 0.4448157f, 0.3874655f, 0.3191778f, 0.2990961f, 0.2799399f, 0.2443816f, 0.2103375f, 0.2014082f, 0.1816079f, 0.1832182f, 0.1771269f, 0.1533071f, 0.1765408f, 0.1845521f, 0.2024591f, 0.1725544f, 0.1821709f,  },
{ 0.6493405f, 0.6090704f, 0.5984317f, 0.5684814f, 0.5377752f, 0.5178257f, 0.5107031f, 0.5036192f, 0.4569455f, 0.4457765f, 0.4864163f, 0.5676019f, 0.6284755f, 0.692818f, 0.7146452f, 0.7520069f, 0.8165693f, 0.8146876f, 0.7770151f, 0.7473659f, 0.7600605f, 0.768492f, 0.7828764f, 0.7976403f, 0.7772961f, 0.7515796f, 0.7639187f, 0.721221f, 0.7448841f, 0.7381898f, 0.6838772f, 0.6219811f, 0.5634078f, 0.4928483f, 0.3861004f, 0.3242753f, 0.3001907f, 0.2913008f, 0.2419549f, 0.2387446f, 0.2358126f, 0.1638739f, 0.1406329f, 0.1384159f, 0.1341982f, 0.1812344f, 0.1845166f, 0.1878754f, 0.2194942f, 0.1995789f,  },
{ 0.6211943f, 0.5531456f, 0.5547315f, 0.5090021f, 0.4808109f, 0.4849777f, 0.4725649f, 0.43995f, 0.4122007f, 0.4213703f, 0.474179f, 0.54242f, 0.5789602f, 0.6046644f, 0.6227252f, 0.6717204f, 0.7525468f, 0.7612553f, 0.7353428f, 0.7298815f, 0.7230031f, 0.7349336f, 0.7529323f, 0.7820274f, 0.7647849f, 0.7490237f, 0.7024249f, 0.7073636f, 0.7089046f, 0.7026572f, 0.6871064f, 0.6214342f, 0.5478893f, 0.5054719f, 0.4214929f, 0.3466526f, 0.2896038f, 0.2763399f, 0.2895492f, 0.2644472f, 0.1960357f, 0.1684072f, 0.1013578f, 0.1058701f, 0.1399055f, 0.1524638f, 0.1723729f, 0.1628802f, 0.1691255f, 0.1734975f,  },
{ 0.5811284f, 0.4973092f, 0.4798899f, 0.4794039f, 0.412838f, 0.3905483f, 0.379324f, 0.371521f, 0.383448f, 0.4267793f, 0.4647617f, 0.528171f, 0.5063337f, 0.521157f, 0.5429901f, 0.5912961f, 0.6493376f, 0.69009f, 0.7077506f, 0.7174653f, 0.6733335f, 0.6563498f, 0.6740532f, 0.7241715f, 0.7284124f, 0.7042759f, 0.6646383f, 0.6551275f, 0.6441907f, 0.651408f, 0.6138127f, 0.591249f, 0.5388961f, 0.5264429f, 0.4519418f, 0.3793737f, 0.3037978f, 0.2287942f, 0.2301005f, 0.2367571f, 0.1880719f, 0.1481818f, 0.1086164f, 0.1048629f, 0.1440702f, 0.140983f, 0.113276f, 0.08247737f, 0.09246397f, 0.1092792f,  },
{ 0.5225687f, 0.4403702f, 0.4140104f, 0.3884137f, 0.3446102f, 0.3036729f, 0.2992266f, 0.3180894f, 0.3565301f, 0.4183729f, 0.4678664f, 0.4939005f, 0.5069713f, 0.5004357f, 0.5032814f, 0.5302982f, 0.5960571f, 0.6307546f, 0.6471752f, 0.6769771f, 0.6239386f, 0.5936654f, 0.5958811f, 0.6036758f, 0.6317777f, 0.6213143f, 0.6095215f, 0.5620241f, 0.5374207f, 0.5340216f, 0.5075048f, 0.4968134f, 0.4797585f, 0.479352f, 0.4613262f, 0.3594002f, 0.2877066f, 0.226488f, 0.204133f, 0.174748f, 0.1592285f, 0.126294f, 0.1130025f, 0.1180592f, 0.1321616f, 0.121393f, 0.08582702f, 0.06019979f, 0.06539227f, 0.05992775f,  },
{ 0.4707383f, 0.4128973f, 0.3826498f, 0.3484652f, 0.3115156f, 0.2884156f, 0.270975f, 0.3003807f, 0.3444629f, 0.4127126f, 0.4565343f, 0.4799677f, 0.5010349f, 0.4843569f, 0.467494f, 0.4962173f, 0.5500496f, 0.598815f, 0.5997676f, 0.6319442f, 0.6116465f, 0.5752732f, 0.5523403f, 0.5198336f, 0.5084588f, 0.5197825f, 0.5286973f, 0.5022718f, 0.4771379f, 0.4690063f, 0.4637559f, 0.4500774f, 0.4383015f, 0.4383249f, 0.3984464f, 0.3378869f, 0.2801174f, 0.2616697f, 0.2274877f, 0.1723608f, 0.1431867f, 0.1409607f, 0.1376545f, 0.1160945f, 0.09989397f, 0.1340457f, 0.1060603f, 0.06802031f, 0.05653981f, 0.05310956f,  },
{ 0.4933031f, 0.398706f, 0.3581701f, 0.328845f, 0.2874896f, 0.2639884f, 0.2496779f, 0.2580715f, 0.2875561f, 0.3356812f, 0.3926152f, 0.4282341f, 0.4864165f, 0.4730991f, 0.483893f, 0.5210516f, 0.5814031f, 0.6087129f, 0.5947533f, 0.6062613f, 0.6038662f, 0.5500359f, 0.5277672f, 0.4933711f, 0.4489346f, 0.4403616f, 0.4448867f, 0.4355059f, 0.423439f, 0.4170828f, 0.4606911f, 0.4511604f, 0.4340951f, 0.4166836f, 0.3641337f, 0.3242677f, 0.3229986f, 0.2796273f, 0.2371404f, 0.1821146f, 0.177589f, 0.1859062f, 0.2035792f, 0.1460854f, 0.1175223f, 0.1070261f, 0.09208842f, 0.07913302f, 0.03854339f, 0.04134528f,  },
{ 0.4667529f, 0.413812f, 0.3343204f, 0.2927146f, 0.2574283f, 0.2703233f, 0.2659399f, 0.2567185f, 0.2572089f, 0.2925176f, 0.3609443f, 0.4220626f, 0.4532842f, 0.4529965f, 0.4705941f, 0.5257019f, 0.5650366f, 0.5983421f, 0.615203f, 0.578383f, 0.5633354f, 0.5051793f, 0.4558082f, 0.4070467f, 0.3447367f, 0.3446352f, 0.3435951f, 0.3837092f, 0.3881805f, 0.3775433f, 0.36622f, 0.3851928f, 0.3973929f, 0.3589703f, 0.3281722f, 0.335173f, 0.3217029f, 0.3163732f, 0.2650523f, 0.2296309f, 0.2226013f, 0.213609f, 0.2115079f, 0.200057f, 0.1350695f, 0.1395692f, 0.1487675f, 0.1109492f, 0.07955815f, 0.05410826f,  },
{ 0.4505162f, 0.400782f, 0.3378575f, 0.2789749f, 0.2621559f, 0.2892023f, 0.2770869f, 0.2468285f, 0.2366835f, 0.3022307f, 0.3646886f, 0.4213977f, 0.4250466f, 0.4534002f, 0.4756874f, 0.492319f, 0.5238657f, 0.5658621f, 0.5504426f, 0.5225776f, 0.4877929f, 0.44174f, 0.3752308f, 0.3276117f, 0.3182417f, 0.3148957f, 0.3072867f, 0.3438207f, 0.3323341f, 0.3298049f, 0.3424676f, 0.3550962f, 0.3691864f, 0.345061f, 0.3361998f, 0.3538377f, 0.3239355f, 0.3058188f, 0.2528455f, 0.2354882f, 0.2119099f, 0.2371063f, 0.2354397f, 0.2296212f, 0.1878784f, 0.1923393f, 0.1718139f, 0.1448948f, 0.1109769f, 0.09092516f,  },
{ 0.4775819f, 0.4033239f, 0.3472158f, 0.3343854f, 0.2887523f, 0.2895761f, 0.2848312f, 0.2681057f, 0.2676373f, 0.3220217f, 0.3410894f, 0.349496f, 0.3637869f, 0.3992139f, 0.406662f, 0.4204562f, 0.4779955f, 0.5204697f, 0.5034353f, 0.475473f, 0.4200971f, 0.4109428f, 0.3582059f, 0.289423f, 0.3169795f, 0.2960321f, 0.2943525f, 0.3317118f, 0.3176683f, 0.3029412f, 0.3411894f, 0.3587251f, 0.3641911f, 0.3482055f, 0.3445336f, 0.3393722f, 0.2776169f, 0.2463221f, 0.2086777f, 0.1731521f, 0.1391903f, 0.1618787f, 0.2049806f, 0.2118189f, 0.1950865f, 0.2109727f, 0.2213861f, 0.1959545f, 0.1291505f, 0.09034329f,  },
{ 0.4687119f, 0.4168222f, 0.3746466f, 0.3383554f, 0.3183345f, 0.3399846f, 0.337588f, 0.3194971f, 0.3256223f, 0.3543464f, 0.3326026f, 0.3372247f, 0.339111f, 0.3487325f, 0.3670277f, 0.4040142f, 0.4330311f, 0.4640576f, 0.4499623f, 0.4199974f, 0.3677653f, 0.3599437f, 0.3383448f, 0.3256113f, 0.3224938f, 0.3068154f, 0.3251805f, 0.3099866f, 0.3088201f, 0.28801f, 0.341745f, 0.3583465f, 0.3561087f, 0.3491519f, 0.3481585f, 0.295171f, 0.2686116f, 0.2135128f, 0.1995149f, 0.1385367f, 0.1276027f, 0.1621428f, 0.2083242f, 0.193302f, 0.2179072f, 0.2203886f, 0.2271482f, 0.2212338f, 0.1988422f, 0.1508474f,  },
{ 0.4862937f, 0.4480154f, 0.3957129f, 0.3450739f, 0.3128326f, 0.3408346f, 0.3837149f, 0.3706536f, 0.3611753f, 0.3589652f, 0.3386051f, 0.3526853f, 0.3743813f, 0.3850903f, 0.3635979f, 0.3870491f, 0.4108877f, 0.4365625f, 0.4228731f, 0.3907547f, 0.3824064f, 0.373578f, 0.332105f, 0.3008191f, 0.3196007f, 0.3166659f, 0.3305356f, 0.307606f, 0.3001336f, 0.3035617f, 0.3415701f, 0.333443f, 0.3239944f, 0.3502561f, 0.3525786f, 0.3127352f, 0.2716902f, 0.232271f, 0.2262254f, 0.1490346f, 0.117075f, 0.1291844f, 0.1770769f, 0.1898632f, 0.2316988f, 0.236103f, 0.245004f, 0.2728153f, 0.258219f, 0.2202839f,  },
{ 0.4233674f, 0.4233517f, 0.3887613f, 0.3640915f, 0.337375f, 0.3687722f, 0.3835794f, 0.3748327f, 0.378592f, 0.3819301f, 0.3925416f, 0.3984341f, 0.3894044f, 0.3962545f, 0.3826183f, 0.4163229f, 0.4413036f, 0.469916f, 0.476104f, 0.4316304f, 0.3988549f, 0.4161806f, 0.3794828f, 0.3532162f, 0.3617969f, 0.3469258f, 0.3625566f, 0.3288196f, 0.3282485f, 0.3217455f, 0.3131837f, 0.3190055f, 0.2843497f, 0.3310971f, 0.3396194f, 0.3389037f, 0.283027f, 0.2288351f, 0.2106661f, 0.1689053f, 0.1645471f, 0.1575907f, 0.1747068f, 0.1840674f, 0.2051172f, 0.2332948f, 0.246239f, 0.277376f, 0.2582873f, 0.2063593f,  },
{ 0.4025435f, 0.4076351f, 0.4060568f, 0.3825317f, 0.3274051f, 0.3749864f, 0.3695612f, 0.3626567f, 0.383713f, 0.4359287f, 0.4289127f, 0.4350107f, 0.4346887f, 0.4366424f, 0.4302021f, 0.4519083f, 0.4487831f, 0.4858945f, 0.4926855f, 0.4562494f, 0.4516052f, 0.448698f, 0.4273529f, 0.4003358f, 0.4324156f, 0.4039571f, 0.3949832f, 0.3561715f, 0.3361358f, 0.3075021f, 0.2942649f, 0.300637f, 0.3019255f, 0.3349463f, 0.3583811f, 0.3630883f, 0.3071351f, 0.2682887f, 0.230301f, 0.1966308f, 0.162017f, 0.171557f, 0.1630874f, 0.1513364f, 0.1906596f, 0.2246308f, 0.2325805f, 0.2687394f, 0.2703739f, 0.2265707f,  },
{ 0.4427859f, 0.4110906f, 0.4090729f, 0.4046582f, 0.3921743f, 0.3953718f, 0.4157449f, 0.3895437f, 0.3922729f, 0.4276549f, 0.4445554f, 0.4626273f, 0.4715926f, 0.4998164f, 0.4589968f, 0.4681115f, 0.4617001f, 0.4981415f, 0.4908125f, 0.4600026f, 0.4591987f, 0.4695687f, 0.4345906f, 0.401112f, 0.4050523f, 0.4187707f, 0.4299046f, 0.3861542f, 0.3502153f, 0.3065588f, 0.2626585f, 0.3129538f, 0.3191918f, 0.3395802f, 0.3283596f, 0.3218449f, 0.2979633f, 0.2772819f, 0.2577779f, 0.2721642f, 0.1990644f, 0.168658f, 0.1766304f, 0.1837327f, 0.1961147f, 0.2168934f, 0.2584476f, 0.3085174f, 0.3358537f, 0.307055f,  },
{ 0.4664329f, 0.450656f, 0.4627946f, 0.4262345f, 0.4257165f, 0.4376902f, 0.4478942f, 0.436074f, 0.4175877f, 0.4599547f, 0.4795491f, 0.4985384f, 0.4840206f, 0.499641f, 0.4766261f, 0.4814332f, 0.4669509f, 0.4906591f, 0.4830302f, 0.4611742f, 0.4547723f, 0.4488107f, 0.4074977f, 0.3880357f, 0.3803079f, 0.4168367f, 0.4467671f, 0.4253258f, 0.4025146f, 0.3583825f, 0.3055264f, 0.3004181f, 0.2938376f, 0.3080086f, 0.3019759f, 0.2968177f, 0.278945f, 0.3043337f, 0.315688f, 0.3164929f, 0.2903391f, 0.2236914f, 0.2272479f, 0.2315594f, 0.2339342f, 0.2525692f, 0.3082355f, 0.3532936f, 0.3660965f, 0.3483684f,  },
{ 0.4961146f, 0.496091f, 0.4766202f, 0.460054f, 0.4573594f, 0.5120426f, 0.5409659f, 0.5175481f, 0.4976991f, 0.5041297f, 0.5165918f, 0.5221211f, 0.5134001f, 0.4786142f, 0.4520228f, 0.451272f, 0.4704517f, 0.4728915f, 0.4503341f, 0.4151291f, 0.4191157f, 0.3942899f, 0.3769958f, 0.3828843f, 0.3482763f, 0.39844f, 0.422801f, 0.4507081f, 0.4579202f, 0.4264962f, 0.3698812f, 0.3252995f, 0.3142002f, 0.3003497f, 0.2715797f, 0.2657052f, 0.2781084f, 0.326567f, 0.312138f, 0.3461331f, 0.3591671f, 0.2864636f, 0.2733624f, 0.2808819f, 0.2861638f, 0.3226514f, 0.3750778f, 0.3985676f, 0.4031857f, 0.3729244f,  },
{ 0.5167547f, 0.4846878f, 0.4565194f, 0.5070345f, 0.534924f, 0.5839716f, 0.5802935f, 0.5664899f, 0.5532788f, 0.5554313f, 0.539588f, 0.5316803f, 0.5406077f, 0.4872823f, 0.463091f, 0.4583976f, 0.447928f, 0.4394112f, 0.4354632f, 0.4567163f, 0.4293416f, 0.3885753f, 0.3914893f, 0.3955454f, 0.3795439f, 0.411649f, 0.4369963f, 0.4555734f, 0.4596805f, 0.4644872f, 0.4226596f, 0.3772106f, 0.3325622f, 0.3136035f, 0.3163154f, 0.2803561f, 0.297889f, 0.3239059f, 0.3267251f, 0.3580597f, 0.3702578f, 0.3207415f, 0.3359204f, 0.3585645f, 0.3394492f, 0.3379016f, 0.3979122f, 0.4437127f, 0.412739f, 0.3754221f,  } };

            // Noise2D.GenerateNoiseMap(Warcraft.MAP_SIZE, Warcraft.MAP_SIZE, 20);

            for (int i = 0; i < Warcraft.MAP_SIZE; i++)
            {
                List<Tile> t = new List<Tile>();
                for (int j = 0; j < Warcraft.MAP_SIZE; j++)
                {
                    if (noise[i, j] < 0.2f)
                        t.Add(new Tile(i, j, TileType.WATER));
                    else if (noise[i, j] >= 0.2f && noise[i, j] < 0.4f)
                        t.Add(new Tile(i, j, TileType.DESERT));
                    else if (noise[i, j] >= 0.4f && noise[i, j] < 0.8f)
                        t.Add(new Tile(i, j, TileType.GLASS));
                    else if (noise[i, j] >= 0.8f)
                        t.Add(new Tile(i, j, TileType.GLASS));
                }

                map.Add(t);
            }


            //Mapping.Add(new int[4] { (int)TileType.WATER, (int)TileType.DESERT, (int)TileType.WATER, (int)TileType.DESERT }, new int[2] { 7, 11 });
            //Mapping.Add(new int[4] { (int)TileType.DESERT, (int)TileType.GLASS, (int)TileType.GLASS, (int)TileType.GLASS }, new int[2] { 4, 14 });
            //Mapping.Add(new int[4] { (int)TileType.GLASS, (int)TileType.GLASS, (int)TileType.DESERT, (int)TileType.DESERT }, new int[2] { 9, 16 });

            //Mapping.Add(new int[4] { (int)TileType.WATER, (int)TileType.DESERT, (int)TileType.DESERT, (int)TileType.DESERT }, new int[2] { 17, 10 });
            //Mapping.Add(new int[4] { (int)TileType.DESERT, (int)TileType.WATER, (int)TileType.DESERT, (int)TileType.DESERT }, new int[2] { 18, 10 });
            //Mapping.Add(new int[4] { (int)TileType.DESERT, (int)TileType.DESERT, (int)TileType.DESERT, (int)TileType.GLASS }, new int[2] { 18, 14 });

            //Mapping.Add(new int[4] { (int)TileType.GLASS, (int)TileType.DESERT, (int)TileType.DESERT, (int)TileType.DESERT }, new int[2] { 14, 14 });

            //Mapping.Add(new int[4] { (int)TileType.GLASS, (int)TileType.FLOREST, (int)TileType.GLASS, (int)TileType.FLOREST }, new int[2] { 3, 7 });
            //Mapping.Add(new int[4] { (int)TileType.GLASS, (int)TileType.FLOREST, (int)TileType.FLOREST, (int)TileType.FLOREST }, new int[2] { 15, 14 });

            OrganizeMap();
        }

        public void OrganizeMap()
        {
            for (int i = 0; i < map.Count; i++)
            {
                for (int j = 0; j < map[i].Count; j++)
                {
                    TileType[] n = MapNeighbourhood(i, j, map[i][j].tileType);

                    map[i][j].ChangeTexture(n);
                }
            }
        }

        private TileType[] MapNeighbourhood(int i, int j, TileType tileType)
        {
            TileType[] neighbourhood = new TileType[4];

            neighbourhood[0] = map[Math.Max(i - 1, 0)][Math.Max(j - 1, 0)].tileType;
            neighbourhood[1] = map[Math.Max(i - 1, 0)][Math.Min(j + 1, 49)].tileType;
            neighbourhood[2] = map[Math.Min(i + 1, 49)][Math.Max(j - 1, 0)].tileType;
            neighbourhood[3] = map[Math.Min(i + 1, 49)][Math.Min(j + 1, 49)].tileType;

            metadata[i, j, 0] = (int)neighbourhood[0];
            metadata[i, j, 1] = (int)neighbourhood[1];
            metadata[i, j, 2] = (int)neighbourhood[2];
            metadata[i, j, 3] = (int)neighbourhood[3];

            return neighbourhood;
        }

        public void LoadContent(ContentManager content)
        {
            texture = content.Load<Texture2D>("Summer Tiles");

            map.ForEach((item) => item.ForEach((tile) => tile.LoadContent(texture)));
            walls.ForEach((item) => item.LoadContent(texture));
        }

        public void Draw(SpriteBatch spriteBatch)
        {
            // map.ForEach((item) => item.ForEach((tile) => tile.Draw(spriteBatch)));
            for (int i = 0; i < 50; i++)
            {
                for (int j = 0; j < 50; j++)
                {
                    map[i][j].Draw(spriteBatch);
                }
            }
            walls.ForEach((item) => item.Draw(spriteBatch));
        }

        public void AddWalls(Vector2 position, int xQuantity, int yQuantity)
        {
            for (int i = 0; i < xQuantity; i++)
                for (int j = 0; j < yQuantity; j++)
                    walls.Add(new Tile(((int)position.X / 32) + i, ((int)position.Y / 32) + j));
        }

        public void AddWalls(Vector2 position, Rectangle rectangle)
        {
            int tileX = ((int)position.X / 32);
            int tileY = ((int)position.Y / 32);

            int textureX = rectangle.X / 32;
            int textureY = rectangle.Y / 32;

            if (!CheckWalls(tileX, tileY))
                walls.Add(new Tile(tileX, tileY, textureX, textureY));
        }

        private bool ArrayEquals(int[] arr1, int[] arr2)
        {
            if (arr1.Length != arr2.Length) return false;

            for (int i = 0; i < arr1.Length; i++)
                if (arr1[i] != arr2[i]) return false;

            return true;
        }

        public void OrganizeWalls()
        {
            for (int i = 0; i < walls.Count; i++)
            {
                if (walls[i].isWall)
                {
                    int[] n = GetNeighbourhood(walls[i].TileX, walls[i].TileY);

                         if (ArrayEquals(n, new int[] { 0, 1, 1, 0 })) walls[i].ChangeTexture(0, 1);
                    else if (ArrayEquals(n, new int[] { 0, 0, 0, 1 })) walls[i].ChangeTexture(1, 1);
                    else if (ArrayEquals(n, new int[] { 0, 1, 0, 1 })) walls[i].ChangeTexture(2, 1);
                    else if (ArrayEquals(n, new int[] { 0, 0, 1, 1 })) walls[i].ChangeTexture(4, 1);
                    else if (ArrayEquals(n, new int[] { 0, 1, 1, 1 })) walls[i].ChangeTexture(5, 1);
                    else if (ArrayEquals(n, new int[] { 1, 0, 0, 0 })) walls[i].ChangeTexture(6, 1);
                    else if (ArrayEquals(n, new int[] { 1, 1, 0, 0 })) walls[i].ChangeTexture(7, 1);
                    else if (ArrayEquals(n, new int[] { 1, 0, 1, 0 })) walls[i].ChangeTexture(8, 1);
                    else if (ArrayEquals(n, new int[] { 1, 1, 1, 0 })) walls[i].ChangeTexture(10, 1);
                    else if (ArrayEquals(n, new int[] { 1, 0, 0, 1 })) walls[i].ChangeTexture(11, 1);
                    else if (ArrayEquals(n, new int[] { 1, 1, 0, 1 })) walls[i].ChangeTexture(12, 1);
                    else if (ArrayEquals(n, new int[] { 1, 0, 1, 1 })) walls[i].ChangeTexture(13, 1);
                    else if (ArrayEquals(n, new int[] { 1, 1, 1, 1 })) walls[i].ChangeTexture(14, 1);
                    else if (ArrayEquals(n, new int[] { 0, 0, 0, 0 })) walls[i].ChangeTexture(16, 0);
                    else if (ArrayEquals(n, new int[] { 0, 1, 0, 0 })) walls[i].ChangeTexture(17, 0);
                    else if (ArrayEquals(n, new int[] { 0, 0, 1, 0 })) walls[i].ChangeTexture(18, 0);
                }
            }
        }

        private int[] GetNeighbourhood(int tileX, int tileY)
        {
            int[] neighbourhood = new int[4];
            
            for (int i = 0; i < walls.Count; i++)
            {
                if (walls[i].isWall)
                {
                    if (walls[i].TileX == tileX && walls[i].TileY + 1 == tileY) neighbourhood[3] = 1;
                    if (walls[i].TileX == tileX && walls[i].TileY - 1 == tileY) neighbourhood[1] = 1;
                    if (walls[i].TileX - 1 == tileX && walls[i].TileY == tileY) neighbourhood[2] = 1;
                    if (walls[i].TileX + 1 == tileX && walls[i].TileY == tileY) neighbourhood[0] = 1;
                }
            }

            return neighbourhood;
        }

        public bool CheckWalls(Vector2 position, int xQuantity, int yQuantity)
        {
            int pointX = (int)position.X / 32;
            int pointY = (int)position.Y / 32;

            if (pointX < 0 || pointY < 0 ||
                pointX + 1 > Warcraft.MAP_SIZE||
                pointY + 1 > Warcraft.MAP_SIZE)
                return true;

            for (int k = 0; k < walls.Count; k++)
            {
                for (int i = 0; i < xQuantity; i++)
                    for (int j = 1; j < yQuantity; j++)
                        if (walls[k].TileX == pointX + i && walls[k].TileY == pointY + j)
                            return true;
            }

            return false;
        }

        public bool CheckWalls(int pointX, int pointY)
        {
            if (pointX < 0 || pointY < 0 ||
                pointX + 1 > Warcraft.MAP_SIZE ||
                pointY + 1 > Warcraft.MAP_SIZE)
                return true;

            for (int k = 0; k < walls.Count; k++)
            {
                if (walls[k].TileX == pointX && walls[k].TileY == pointY)
                    return true;
            }

            return false;
        }
    }
}
